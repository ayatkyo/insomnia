name: Release Core

on:
  push:
    tags:
      - core@*

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GITHUB_REF: ${{ github.ref }}
  GITHUB_SHA: ${{ github.sha }}
  NPM_CONFIG_TARGET: 11.2.3
  NPM_CONFIG_DISTURL: https://electronjs.org/headers
  NPM_CONFIG_RUNTIME: electron

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest ]
    steps:
      - name: Checkout branch
        uses: actions/checkout@v1
      - name: Read Node version from .nvmrc
        run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
        id: nvm
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ steps.nvm.outputs.NVMRC }}
      - name: Bootstrap packages
        run: npm run bootstrap
      - name: Run tests
        run: npm test
  npm:
    needs: [ test ]
    name: npm
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v1
      - name: Read Node version from .nvmrc
        run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
        id: nvm
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ steps.nvm.outputs.NVMRC }}
      - name: Bootstrap packages
        run: npm run bootstrap
      - name: Release NPM packages
        run: |
          npm config set //registry.npmjs.org/:_authToken ${NPM_TOKEN}
          npm run release
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN}
  create_inso_release:
    needs: [ npm ]
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      tag-name: ${{ steps.get-tag-name.outputs.tag-name }}
    steps:
      - name: Checkout branch
        uses: actions/checkout@v1
      - name: Get version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@master
        with:
          path: packages/insomnia-inso
      - name: Get tag name for version
        id: get-tag-name
        run: echo "::set-output tag-name=lib@${{ steps.package-version.outputs.current-version }}"
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get-tag-name.outputs.tag-name }}
          # The following is all taken from packages/insomnia-app/scripts/release.ts
          name: Inso CLI ${{ steps.package-version.outputs.current-version }} ðŸ“¦
          body: Full changelog â‡’ https://insomnia.rest/changelog
          draft: false
          prerelease: true
  upload_inso:
    needs: [ create_inso_release ]
    name: CLI release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    steps:
      - name: Checkout branch
        uses: actions/checkout@v1
      - name: Read Node version from .nvmrc
        run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
        id: nvm
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ steps.nvm.outputs.NVMRC }}
      - name: Bootstrap packages
        run: npm run bootstrap
      - name: Package Inso CLI
        run: npm run inso-package
      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          # How do I refer to the previously created release?
          tag_name: ${{ needs.create_inso_release.outputs.tag-name }}
          files: packages/insomnia-inso/compressed/*
  windows_app:
    needs: [ npm ]
    name: Windows
    runs-on: windows-2016
    steps:
      - name: Checkout branch
        uses: actions/checkout@v1
      - name: Read Node version from .nvmrc
        run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
        id: nvm
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ steps.nvm.outputs.NVMRC }}
      - name: Bootstrap packages
        run: npm run bootstrap
      - name: Release app
        run: npm run app-release
        env:
          CSC_LINK: ${{ secrets.DESIGNER_WINDOWS_CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.DESIGNER_WINDOWS_CSC_KEY_PASSWORD }}
  mac_app:
    needs: [ npm ]
    name: Mac
    runs-on: macos-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v1
      - name: Read Node version from .nvmrc
        run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
        id: nvm
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ steps.nvm.outputs.NVMRC }}
      - name: Bootstrap packages
        run: npm run bootstrap
      - name: Release app
        run: npm run app-release
        env:
          APPLE_ID: ${{ secrets.DESIGNER_APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.DESIGNER_APPLE_ID_PASSWORD }}
          CSC_LINK: ${{ secrets.DESIGNER_MAC_CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.DESIGNER_MAC_CSC_KEY_PASSWORD }}
  linux_app:
    needs: [ npm ]
    name: Linux
    runs-on: ubuntu-latest
    steps:
      - name: Install Snapcraft
        run: |
          sudo snap install snapcraft --classic
          echo "${{ secrets.SNAPCRAFT_LOGIN_FILE }}" > snapcraft.txt && snapcraft login --with snapcraft.txt
      - name: Checkout branch
        uses: actions/checkout@v1
      - name: Read Node version from .nvmrc
        run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
        id: nvm
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ steps.nvm.outputs.NVMRC }}
      - name: Bootstrap packages
        run: npm run bootstrap
      - name: Release app
        run: npm run app-release
        env:
          BUILD_TARGETS: AppImage,deb,tar.gz,rpm,snap
